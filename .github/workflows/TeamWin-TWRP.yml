name: TeamWin [TWRP]

on:
  workflow_dispatch:
    inputs:
      MANIFEST_BRANCH:
        description: 'TWRP Manifest Branch'
        required: true
        default: 'twrp-9.0'
        type: choice
        options:
        - twrp-14
        - twrp-12.1
        - twrp-11
        - twrp-10.0-deprecated
        - twrp-9.0
        - twrp-8.1
        - twrp-8.1-macOS
        - twrp-7.1
        - twrp-6.0
        - twrp-5.1
        - twrp-4.4-deprecated
      DEVICE_TREE:
        description: 'Custom Recovery Tree' # Your already made Device Tree for TWRP
        required: true
        default: 'https://github.com/Tec4Sho/android_device_alps_tb8163p3'
      DEVICE_TREE_BRANCH:
        description: 'Custom Recovery Tree Branch' # Your Device Tree Branch, make sure it's right.
        required: true
        default: 'android-9.0'
      DEVICE_PATH:
        description: 'DEVICE_PATH'
        required: true
        default: 'device/alps/tb8163p3'
      DEVICE_NAME:
        description: 'DEVICE_NAME'
        required: true
        default: 'tb8163p3'
      MAKEFILE_NAME:
        description: 'MAKEFILE_NAME (without including .mk, Example: omni_7304F)'
        required: true
        default: 'omni_tb8163p3'
      BUILD_TARGET:
        description: 'Specify your Build Target' # Pick among boot, recovery and vendor_boot
        required: true
        default: 'recovery'
        type: choice
        options:
        - boot
        - recovery
        - vendorboot
      LDCHECK:
        description: 'Use LDCHECK'
        required: false
        default: 'false'
        type: boolean
      LDCHECKPATH:
        description: 'Path of blobs to check' # Use it know what kind of dependencies your missing for decryption blobs.
        required: true
        default: 'system/bin/qseecomd'

jobs:
  build:
    name: Build TWRP by ${{ github.actor }}
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id
    env:
      GITHUB_TOKEN: ${{ secrets.ALPS }}
    permissions:
      contents: write
    steps:
    - name: Check Out
      uses: actions/checkout@v4
      
    - name: Cleanup
      uses: rokibhasansagar/slimhub_actions@main
      
    - name: Set Swap Space
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 12

    - name: Check Manifest Branch
      run: |
        if [ ${{ inputs.MANIFEST_BRANCH }} == 'twrp-11' ] || [ ${{ inputs.MANIFEST_BRANCH }} == 'twrp-12.1' ] || [ ${{ inputs.MANIFEST_BRANCH }} == 'twrp-14' ]; then
            echo "MANIFEST=https://github.com/minimal-manifest-twrp/platform_manifest_twrp_aosp.git" >> $GITHUB_ENV
            echo "CHECK_LEGACY_BRANCH=false" >> $GITHUB_ENV
        else
            echo "MANIFEST=https://github.com/mlm-games/platform_manifest_twrp_omni.git" >> $GITHUB_ENV
            echo "CHECK_LEGACY_BRANCH=true" >> $GITHUB_ENV
        fi

    - name: Prepare the environment
      run: |
        sudo apt-get update
        sudo apt-get -y upgrade
        sudo apt-get -y install gperf gcc-multilib gcc-10-multilib g++-multilib g++-10-multilib libc6-dev lib32ncurses-dev x11proto-core-dev libx11-dev tree lib32z-dev libgl1-mesa-dev libxml2-utils xsltproc bc ccache lib32readline-dev lib32z1-dev liblz4-tool libncurses5-dev libsdl1.2-dev libwxgtk3.0-gtk3-dev libxml2 lzop pngcrush schedtool squashfs-tools imagemagick libbz2-dev lzma ncftp qemu-user-static libstdc++-10-dev libtinfo5 libgflags-dev libncurses5 python3

    - name: Install OpenJDK
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '8'

    - name: Install Git-Repo
      run: |
        mkdir ~/bin
        curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
        chmod a+x ~/bin/repo
        sudo ln -sf ~/bin/repo /usr/bin/repo

    - name: Initialize Repo
      run: |
        mkdir android-recovery
        cd android-recovery 
        echo "android-recovery-folder=$(pwd)" >> $GITHUB_OUTPUT
        # git remote set-url origin 'git@github.com:Tec4Sho/android_device_alps_tb8163p3.git'
        git config --global user.name 'Tec4Sho'
        git config --global user.email 'tec4sho@gmail.com'
        git remote -v
        # ssh -vT git@github.com
        # ssh -T git@github.com
        # eval $(ssh-agent -s)
        repo init --depth=1 -u ${{ env.MANIFEST }} -b ${{ inputs.MANIFEST_BRANCH }}
     # id: pwd
     
    - name: Setup SSH Keys
      if: ${{ startsWith(github.event.inputs.MANIFEST_URL, 'git@github.com') }}
      uses: webfactory/ssh-agent@v0.9.1
      with:
          ssh-private-key: |
              ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Repo Sync
      run: |
        cd android-recovery
        repo sync -j$(nproc --all) --force-sync
      working-directory: ${{ steps.pwd.outputs.android-recovery-folder }}
      
    - name: Clone Device Tree
      run: |
        cd android-recovery
        mkdir -p ${{ inputs.DEVICE_PATH }}
        git clone ${{ inputs.DEVICE_TREE }} --branch ${{ inputs.DEVICE_TREE_BRANCH }} --single-branch
        git fetch origin ${{ inputs.DEVICE_TREE_BRANCH }}
        echo "COMMIT_ID=$(git rev-parse HEAD)" >> $GITHUB_ENV
      working-directory: ${{ steps.pwd.outputs.android-recovery-folder }}

    - name: Repo Dir Check
      run: |
        cd android-recovery    
        echo "android-recovery dir path folders and files list:"
        pwd
        ls -psR1
      working-directory: ${{ steps.pwd.outputs.android-recovery-folder }}
      continue-on-error: true
      
    - name: Installing python2 for legacy builds
      if: env.CHECK_LEGACY_BRANCH == 'true'
      run: |
        sudo apt-get -y install python2
        sudo rm -rf /usr/bin/python
        sudo ln -sf /usr/bin/python2 /usr/bin/python

    - name: Setup Build Date # Output will be use in Release
      run: |
        echo "BUILD_DATE=$(date +%Y%m%d)" >> $GITHUB_ENV    

    - name: Building Image 
      run: |
        cd android-recovery
        source build/envsetup.sh
        export ALLOW_MISSING_DEPENDENCIES=true
        lunch ${{ inputs.MAKEFILE_NAME }}-eng && make clean && make ${{ inputs.BUILD_TARGET }}image -j$(nproc --all)
        echo "Done building your ${{ inputs.BUILD_TARGET }}.img"
      working-directory: ${{ steps.pwd.outputs.android-recovery-folder }}
      
    - name: Upload to Release
      if: success()
      uses: softprops/action-gh-release@master
      with:
        files: |
          android-recovery/out/target/product/${{ inputs.DEVICE_NAME }}/${{ inputs.BUILD_TARGET }}.img
          android-recovery/out/target/product/${{ inputs.DEVICE_NAME }}/*installer*zip
          android-recovery/out/target/product/${{ inputs.DEVICE_NAME }}/ramdisk-recovery.*
          android-recovery/out/target/product/${{ inputs.DEVICE_NAME }}/vbmeta.*
        name: Unofficial TWRP for ${{ inputs.DEVICE_NAME }} // ${{ env.BUILD_DATE }}
        tag_name: ${{ github.run_id }}
        body: |
          Build: ${{ inputs.MANIFEST_BRANCH }}
          Device: [Device Tree/Branch](${{ inputs.DEVICE_TREE }}/tree/${{ inputs.DEVICE_TREE_BRANCH }})
          Commit: Most recent [commit](${{ inputs.DEVICE_TREE }}/commit/${{ env.COMMIT_ID }}) during building.
        prerelease: true

    - name: Run LDCheck
      if: inputs.LDCHECK == 'true'
      run: |
        cd tools
        mv -n libneeds ${GITHUB_WORKSPACE}/android-recovery/out/target/product/${{ inputs.DEVICE_NAME }}/recovery/root/
        mv -n ldcheck ${GITHUB_WORKSPACE}/android-recovery/out/target/product/${{ inputs.DEVICE_NAME }}/recovery/root/
        cd ../android-recovery/out/target/product/${{ inputs.DEVICE_NAME }}/recovery/root
        python3 ldcheck -p system/lib64:vendor/lib64:system/lib:vendor/lib -d ${{ inputs.LDCHECKPATH }}
        echo "Done checking missing dependencies. Review, and reconfigure your tree."
      continue-on-error: true
#${{ fromJSON('["ubuntu-latest", "self-hosted"]')[github.repository == 'github/docs-internal'] }} ./${{ inputs.DEVICE_PATH }}
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: false
